#!/bin/bash
#__________________________________________________________
# Author:     phillips321 contact through phillips321.co.uk
# License:    CC BY-SA 3.0
# Use:        All in one pentest script designed for bt5
# Released:   www.phillips321.co.uk
  version=1.5
# Dependencies:
#	nmap
#	sslscan
#	gnome-web-photo
#	arp-scan
#	dialog
#	onesixtyone
#	amap
# backtrack users can apt-get install sslscan gnome-web-photo arp-scan dialog
#
# ToDo:
#	nikto
#	add ability to launch nesssus against targets
#	ldapminer: wine ldapminer.exe -d -h ${ip}
#	add nfs connect followed by tree command
#	remove duplicates from open_ports.txt
# ChangeLog:
#	v1.5 - Fixed snmp scans (amap not identifying snmp service)
#	v1.4 - added  (n of X) scanned to progress dialog
#	v1.3 - cleanup after nbtscan (removes scans with no response)
#	v1.2 - added vlan_ports.txt to show all ports(TCP+UDP found (for ACL testing and import to nessus)
#	v1.1 - made scan windows smaller using geometry 80x10
#	v1.0 - Can now change number of threads on the fly using the popup xterm
#	v0.6 - COUNT++ improved on nmap scans to be more accurate
# 	v0.5 - offers to create targets.txt if it's now found
#		 - cleans up nmap output if scan was cancelled
#	v0.4 - addition of custom nmap port scan
#	v0.3 - comments on all functions
#	v0.2 - Caught ESC/Cancel signals to quit program
#	v0.1 - First write
#___________________________________________________________
f_setdefaults(){ #defaults for running the script
	NMAPTCP="nmap -sS -vv -d -A -Pn -n -r -oA" # this needs to finish with -oA and cannot include -p
	NMAPUDP="nmap -sU -vv -d -A -Pn -n -r -oA" # this needs to finish with -oA and cannot include -p
	NMAPTCPCUSTOMPORTS="21,22,23,50,135,139,199,443,445,1556,2301,2381,3181,3389,8080,8081,47001"
	NMAPUDPCUSTOMPORTS="7,13,17,19,53,111,123,135,137,161,500,1434,2049,5353,8161"
	NMAPTCPDEFAULT=0
	NMAPTCPALL=0
	NMAPTCPCUSTOM=0
	NMAPUDPDEFAULT=0
	NMAPUDPALL=0
	NMAPUDPCUSTOM=0
	RUNARPSCAN=0
	RUNNMAP=0
	RUNAMAP=0
	RUNSSLSCAN=0
	RUNGWP=0
	RUNSNMPSCAN=0
	RUNSNMPGET=0
	RUNNBTSCAN=0
	RUNNING=0
	THREADS=10
	echo 0 > /tmp/exitvalue
	echo 10 > /tmp/threads
}
f_main(){ #this is the main bulk of the program that calls the scans
	dialog --title "Scan Types" --separate-output --output-fd 2 --checklist "What do you want to run? Scan selections are dependent on the scan type above it being run first. For example, you cannot run sslscan if anamp and nmap have not been run prior." 0 0 0 \
		arpscan "run arp-scan to create targets.txt" off \
		nmap "nmap targets" on \
		amap "amap ports found using nmap" off \
		sslscan "sslscan targets" off \
		gwp "Take photo of web pages found?" off \
		snmpscans "Check for default SNMP community strings" off \
        snmpget "Get data from SNMP services using known strings" off \
        nbtscan "Run nbtscan against targets" off \
	2> /tmp/answer
	case $? in 1|255) : do ; f_exit ;; esac
	checklist=`cat /tmp/answer`
	for opt in ${checklist}
    do
		case ${opt} in
			arpscan) : do ; RUNARPSCAN=1 ;;
			nmap) : do ; RUNNMAP=1 ;;
			amap) : do ; RUNAMAP=1 ;;
			sslscan) : do ; RUNSSLSCAN=1 ;;
			gwp) : do ; RUNGWP=1 ;;
			snmpscans) : do ; RUNSNMPSCAN=1 ;;
			snmpget) : do ; RUNSNMPGET=1 ;;
			nbtscan) : do ; RUNNBTSCAN=1 ;;
		esac
	done
	dialog --title "Where would you like the output to go?" --dselect "`pwd`/output" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; OUTPUTDIR=`cat /tmp/answer` ; f_directorycheck
	dialog --title "Threads" --inputbox "How many threads would you like to run?" 0 0 10 2> /tmp/threads ; case $? in 1|255) : do ; f_exit ;; esac ; THREADS=`cat /tmp/threads`
	f_threads &
	if [ ${RUNARPSCAN} = "1" ] ; then f_arpscan ; fi
	if [ ${RUNNMAP} = "1" ] ; then f_nmapoptions ; f_nmapscans ; fi
	if [ ${RUNAMAP} = "1" ] ; then f_amapscans ; fi
	if [ ${RUNSSLSCAN} = "1" ] ; then f_sslscans ; fi
	if [ ${RUNGWP} = "1" ] ; then f_gwp ; fi
	if [ ${RUNSNMPSCAN} = "1" ] ; then f_snmpscan ; fi
	if [ ${RUNSNMPGET} = "1" ] ; then f_snmpget ; fi
	if [ ${RUNNBTSCAN} = "1" ] ; then f_runnbtscan ; fi
}
f_debug(){ #this is debug information (insert f_debug in the script to pause)
	echo "checklist = ${checklist}"
	echo "NMAPTCPDEFAULT=${NMAPTCPDEFAULT}"
	echo "NMAPTCPALL=${NMAPTCPALL}"
	echo "NMAPTCPCUSTOM=${NMAPTCPCUSTOM}"
	echo "NMAPTCPCUSTOMPORTS=${NMAPTCPCUSTOMPORTS}"
	echo "NMAPUDPDEFAULT=${NMAPUDPDEFAULT}"
	echo "NMAPUDPALL=${NMAPUDPALL}"
	echo "NMAPUDPCUSTOM=${NMAPUDPCUSTOM}"
	echo "NMAPUDPCUSTOMPORTS=${NMAPUDPCUSTOMPORTS}"
	echo "Number of scantypes = $((${NMAPTCPDEFAULT}+${NMAPTCPALL}+${NMAPTCPCUSTOM}+${NMAPUDPDEFAULT}+${NMAPUDPALL}+${NMAPUDPCUSTOM}))"
	echo "Output directory = ${OUTPUTDIR}"
	echo "Number of threads = ${THREADS}"
	echo "RUNARPSCAN = ${RUNARPSCAN}"
	echo "RUNNMAP = ${RUNNMAP}"
	echo "RUNAMAP = ${RUNAMAP}"
	echo "RUNSSLSCAN = ${RUNSSLSCAN}"
	echo "RUNGWP = ${RUNGWP}"
	echo "RUNSNMPSCAN = ${RUNSNMPSCAN}"
	echo "RUNSNMPGET = ${RUNSNMPGET}"
	echo "RUNNBTSCAN = ${RUNNBTSCAN}"
	echo "COUNT = ${COUNT}"
	echo "NUMBER = ${NUMBER}"
	read -p "pause"
}
f_directorycheck(){ #creates dir if it's not present
	if [ -d ${OUTPUTDIR} ] ; then sleep 0 ; else mkdir ${OUTPUTDIR} ; fi
}
f_arpscan(){ #creates targets.txt and then allows editing
	if [ -s targets.txt ] 
	then
		dialog --title "ERROR:" --pause "targets.txt already exists. Please delete it from the working directory if you wish to create a new one using this script" 10 60 5 ; clear
	else
		dialog --title "ARPSCAN" --infobox "We are now scanning the local subnet for devices using arp-scan" 0 0
		arp-scan -l -g | grep . | cut -f1 | grep -v packets |grep -v Interface | grep -v Ending | grep -v Starting | sort -nb | uniq > `pwd`/targets.txt
	fi
	dialog --title "Please edit the targets.txt file" --editbox "`pwd`/targets.txt" 0 0 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	cp /tmp/answer `pwd`/targets.txt
	cp `pwd`/targets.txt ${OUTPUTDIR}/targets.txt
}
f_nmapoptions(){ #determins what typoe of nmap scans you want
	dialog --title "nmap options" --separate-output --output-fd 2 --checklist "What do you want to run" 0 0 0 \
		nmaptcpdefault "Run SYN scan against DEFAULT TCP ports?" on \
		nmaptcpall "Run SYN scan against ALL TCP ports?" on \
		nmaptcpcustom "Run SYN scan against CUSTOM TCP ports?" off \
		nmapudpdefault "Run UDP scan against DEFAULT UDP ports?" on \
		nmapudpall "Run UDP scan against ALL UDP ports (SLOW!)?" off \
		nmapudpcustom "Run UDP scan against CUSTOM UDP ports?" on \
		2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac
	result=`cat /tmp/answer` && rm /tmp/answer ; clear
	for opt in ${result}
	do
		case ${opt} in
			nmaptcpdefault) : do ; NMAPTCPDEFAULT=1  ;;
			nmaptcpall) : do ; NMAPTCPALL=1  ;;
			nmaptcpcustom) : do ; NMAPTCPCUSTOM=1 ;;
			nmapudpdefault) : do ; NMAPUDPDEFAULT=1  ;;
			nmapudpall) : do ; NMAPUDPALL=1  ;;
			nmapudpcustom) : do ; NMAPUDPCUSTOM=1 ;;
		esac
	done
	if [ ${NMAPTCPCUSTOM} = "1" ]
	then
		dialog --title "NMAP Custom TCP Ports" --inputbox "Please enter the TCP ports you would like to scan seperated by a comma:" 0 0 ${NMAPTCPCUSTOMPORTS} 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; NMAPTCPCUSTOMPORTS=`cat /tmp/answer`
	fi
	if [ ${NMAPUDPCUSTOM} = "1" ]
	then
		dialog --title "NMAP Custom UDP Ports" --inputbox "Please enter the UDP ports you would like to scan seperated by a comma:" 0 0 ${NMAPUDPCUSTOMPORTS} 2> /tmp/answer ; case $? in 1|255) : do ; f_exit ;; esac ; NMAPUDPCUSTOMPORTS=`cat /tmp/answer`
	fi
}
f_threads(){ #pops up an small window to control the number of threads
	exitvalue=0
	while [ ${exitvalue} != 1 ]
	do
		xterm -title 'THREADS' -geometry 36x13 -e 'THREADS=`cat /tmp/threads` ; dialog --title "THREADS" --inputbox "Currently running ${THREADS} threads, enter a new value here to change it:" 0 0 ${THREADS} 2> /tmp/threadsout ; case $? in 1|255) : do ; echo 1 > /tmp/exitvalue ;; esac ; cp /tmp/threadsout /tmp/threads'
		exitvalue=`cat /tmp/exitvalue`
	done
}
f_nmapscans(){ #nmap scans of targets
	COUNT=0	
	NUMBER=$(((`cat targets.txt| wc -l`)*$((${NMAPTCPDEFAULT}+${NMAPTCPALL}+${NMAPTCPCUSTOM}+${NMAPUDPDEFAULT}+${NMAPUDPALL}+${NMAPUDPCUSTOM}))))
	if [ -s targets.txt ] ; then sleep 0 ; else dialog --title "ERROR:" --pause "targets.txt not found in current directory, we'll create one..." 10 60 5 ; f_arpscan ; fi
	for i in `cat targets.txt`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		TARGET=${i}
		LOC=${OUTPUTDIR}/${TARGET}
		if [ ${NMAPTCPDEFAULT} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} small TCP" -e "${NMAPTCP} ${LOC}.small.tcp ${TARGET}" & fi
		if [ ${NMAPTCPALL} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} big TCP" -e "${NMAPTCP} ${LOC}.big.tcp -p1-65535 ${TARGET}" & fi
		if [ ${NMAPTCPCUSTOM} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} custom TCP" -e "${NMAPTCP} ${LOC}.custom.tcp -p${NMAPTCPCUSTOMPORTS} ${TARGET}" & fi
		if [ ${NMAPUDPDEFAULT} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} small UDP" -e "${NMAPUDP} ${LOC}.small.udp ${TARGET}" & fi
		if [ ${NMAPUDPALL} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} big UDP" -e "${NMAPUDP} ${LOC}.big.udp -p1-65535 ${TARGET}" & fi
		if [ ${NMAPUDPCUSTOM} = "1" ] ; then ((COUNT++)); sleep 1; xterm -geometry 80x10 -title "${TARGET} custom UDP" -e "${NMAPUDP} ${LOC}.custom.udp -p${NMAPUDPCUSTOMPORTS} ${TARGET}" & fi
		while [ `ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l` -ge ${THREADS} ]
			do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
		sleep 5		
	done
	while [ `ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep ${OUTPUTDIR} | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NMap Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	# delete scans that were cancelled during running
	cd "${OUTPUTDIR}"
	for i in `ls *.gnmap`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 2 ];then rm ${i};fi;done 
	for i in `ls *.xml`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 15 ];then rm ${i};fi;done
	for i in `ls *.nmap`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 1 ];then rm ${i};fi;done
	cat *p.nmap | grep "scan\ report\ for\|Interesting\|open\|---------------------------------------------" | grep -v "OSScan" | grep -v "filtered" > open_ports.txt
	cat open_ports.txt | grep open | cut -f1 -d"/" | sort -u | grep -v fingerprint | sed ':a;N;$!ba;s/\n/,/g' > vlan_ports.txt
	cd -
}
f_amapscans(){ #amap scans (of nmap output)
	cd "${OUTPUTDIR}"
	COUNT=0
	NUMBER=`ls *.gnmap | sed -e "s/.gnmap//" | wc -l`
	for i in `ls *.gnmap | sed -e "s/.gnmap//"`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "AMap Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		((COUNT++)); xterm -geometry 80x10 -title "${i} AMAP" -e "amap -i ${i}.gnmap -o ${i}.amap | tee -a amap_full.txt" &
		while [ `ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l` -ge ${THREADS} ]
		do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
		sleep 1
	done
	while [ `ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep AMAP | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "AMap Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	cat amap_full.txt | cut -d" " -f3,4,5 | grep matches | sort -n | uniq > amap.txt
	cat amap.txt | grep http | cut -d"/" -f 1 | sort | uniq > amap.http.txt
	cat amap.txt | grep ssl | cut -d"/" -f 1 | sort | uniq > amap.ssl.txt
	cat amap_full.txt | cut -d" " -f3,4,5 | grep 161/udp | cut -d"/" -f1 | sort -u > amap.snmp.txt
	cd -
}
f_sslscans(){ #sslscans of ssl services (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			SSLOUT="`echo "${i}" | sed -e s/:/_/g`" 
			((COUNT++)); xterm -geometry 80x10 -title "${i} SSLSCAN" -e "sslscan --no-failed ${i} | tee ${SSLOUT}.sslscan.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SSLSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
		cat *.sslscan.txt | grep "Testing\ SSL\|Accepted\|ERROR" | grep "SSLv2\|Testing\|\ 40\|\ 56" | grep -v "ERROR" > WeakCiphers.txt
	fi	
	cd - 
}
f_gwp(){ #takes photos of http(s) web site roots (using amap output)
	cd "${OUTPUTDIR}"
	if [ -s amap.ssl.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.ssl.txt | wc -l`
		for i in `cat amap.ssl.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-SSL Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HTTPOUT="`echo "${i}" | sed -e s/:/_/g`" 
			((COUNT++)); xterm -geometry 80x10 -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -t 20 -w 1024 -m photo -f --format=png https://${i} ${HTTPOUT}_https.png" &
			while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	if [ -s amap.http.txt ] 
	then
	COUNT=0
	NUMBER=`cat amap.http.txt | wc -l`
		for i in `cat amap.http.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "GWP-HTTP Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			HTTPOUT="`echo "${i}" | sed -e s/:/_/g`" 
			((COUNT++)); xterm -geometry 80x10 -title "${i} GNOME-WEB-PHOTO" -e "gnome-web-photo -m photo -f --format=png ${i} ${HTTPOUT}_http.png" &
			while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
			sleep 1
		done
	fi
	while [ `ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep GNOME | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SSL Scan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	sleep 1
	cd -
}
f_snmpscan(){ #checks for default community strings (using amap output)
	cd "${OUTPUTDIR}"
	which pentest.sh; retval=`echo $?`
	if [ ${retval} = 0 ]
	then DICT=`which pentest.sh | sed -e "s/pentest.sh/snmpdict.txt/"`
	else DICT="/pentest/enumeration/snmp/onesixtyone/dict.txt"
	fi
	if [ -s amap.snmp.txt ] 
	then
		COUNT=0
		NUMBER=`cat amap.snmp.txt | wc -l`
		for i in `cat amap.snmp.txt`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			ip=`echo ${i} | cut -f1 -d":"`
			((COUNT++)); xterm -geometry 80x10 -title "${ip} SNMPSCAN" -e "/pentest/enumeration/snmp/onesixtyone/onesixtyone -c ${DICT} ${ip} | tee ${ip}.snmpscan.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SNMPSCAN | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Scan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
	fi
	cat *.snmpscan.txt | grep -v Scanning > SNMPCommunityStrings.txt
	cd -
}
f_snmpget(){ #collects data from snmp services  (using snmpscan output)
	cd "${OUTPUTDIR}"
	if [ -s SNMPCommunityStrings.txt ] 
	then
		COUNT=0
		NUMBER=`cat SNMPCommunityStrings.txt | wc -l`
		for i in `cat SNMPCommunityStrings.txt | cut -f1,2 -d" " | sed -e "s/ //"`
		do
			THREADS=`cat /tmp/threads`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress - started ${COUNT} of ${NUMBER} scans" 6 80
			ip=`echo $i | cut -f1 -d"["`
			string=`echo $i | cut -f2 -d"[" | sed -e "s/]//"`
			((COUNT++)); xterm -geometry 80x10 -title "${ip} SNMPGET" -e "snmpwalk -v2c -c ${string} ${ip} | tee ${ip}.snmpget.txt; sleep 5" &
			while [ `ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l` -ge ${THREADS} ]
			do
				THREADS=`cat /tmp/threads`
				sleep 1
			done
		sleep 1
		done
		while [ `ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l` -gt 0 ]
		do
			RUNNING=`ps -Aef --cols 200 | grep SNMPGET | grep xterm | wc -l`
			echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "SNMP Get Progress - No more left to start, nwaiting for ${RUNNING} scans to finish" 6 80
			sleep 1
		done
	fi
	cd -
}
f_runnbtscan(){ #nbtscan against targets
	cd "${OUTPUTDIR}"
	COUNT=0
	NUMBER=`cat targets.txt | wc -l`
	for i in `cat targets.txt`
	do
		THREADS=`cat /tmp/threads`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NBTScan Progress - started ${COUNT} of ${NUMBER} scans" 6 80
		((COUNT++)); xterm -geometry 80x10 -title "${i} NBTSCAN" -e "nbtscan -vh ${i} | tee ${i}.nbtscan.txt; sleep 5" &
		while [ `ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l` -ge ${THREADS} ]
		do
			THREADS=`cat /tmp/threads`
			sleep 1
		done
	sleep 1
	done
	while [ `ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l` -gt 0 ]
	do
		RUNNING=`ps -Aef --cols 200 | grep NBTSCAN | grep xterm | wc -l`
		echo $(($((${COUNT}*100))/${NUMBER})) | dialog --gauge "NBTScan Progress - No more left to start, waiting for ${RUNNING} scans to finish" 6 80
		sleep 1
	done
	#delete no responses
	for i in `ls *.nbtscan.txt`;do wcl=`cat ${i} | wc -l`;if [ ${wcl} -le 2 ];then rm ${i};fi;done
	cd -
}
f_cleanup(){ #deletes files created that are empty or blank
	cd "${OUTPUTDIR}"
	for i in `ls *.png`
	do
		iSIZE=`stat -c %s ${i}`
		if [ ${iSIZE} -eq "469" ] ; then rm ${i} ; fi
	done
	if [ -s amap.ssl.txt ] ; then sleep 0 ; else rm amap.ssl.txt ; fi
	if [ -s amap.http.txt ] ; then sleep 0 ; else rm amap.http.txt ; fi
	if [ -s WeakCiphers.txt ] ; then sleep 0 ; else rm WeakCiphers.txt ; fi
	if [ -s SNMPCommunityStrings.txt ] ; then sleep 0 ; else rm SNMPCommunityStrings.txt ; fi
	cd -
}
f_displayresults(){ #displays output in xterm windows
	cd "${OUTPUTDIR}"
	if [ -s open_ports.txt ] ; then xterm -title "OpenPorts from ${OUTPUTDIR}" -e "grep -E --color=always '.*(ssh|rdp|ssl|http|telnet|https|sslv2|mail|smtp|snmp|oracle|sql|tnls|ftp|sftp|echo|chargen|dns|qotd|motd|finger|rlogin|rexec|discard|daytime).*|' open_ports.txt | less -R" & fi
	if [ -s WeakCiphers.txt ] ; then xterm -title "WeakCiphers from ${OUTPUTDIR}" -e "less -R WeakCiphers.txt" & fi
	if [ -s SNMPCommunityStrings.txt ] ; then xterm -title "SNMPCommunityStrings from ${OUTPUTDIR}" -e "less -R SNMPCommunityStrings.txt" & fi
	cd -
	dialog --title "COMPLETED" --pause "Scanning has finished, now time to get root" 10 80 600 ; clear
}
f_exit(){ #this is called upon ESC/Cancel press
	dialog --title "Exiting" --pause "See ya" 10 40 2 ; clear
	exit 1
}
### What to run ###
f_setdefaults
f_main
f_cleanup
f_displayresults
#f_debug
exit 0
